# Name of the Pipeline
name: build
# Triggers
on:
  push:
    branches:
      - main
      - release/*
  workflow_dispatch:
# Variables
env:
  APP_DIRECTORY: site
  INFRASTRUCTURE_DIRECTORY: infrastructure
# Jobs
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checking out source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Installing project dependencies
        run: npm install
        working-directory: ${{ env.APP_DIRECTORY }}
      - name: Building the application
        run: npm run build-app
        working-directory: ${{ env.APP_DIRECTORY }}
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Uploading application and infrastructure artifacts to Actions pipelines
        if: ${{ github.ref_name == 'main' }}
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: |
            ${{ env.APP_DIRECTORY }}/.next
            ${{ env.APP_DIRECTORY }}/next.config.mjs
            ${{ env.APP_DIRECTORY }}/public
            ${{ env.APP_DIRECTORY }}/package.json
            ${{ env.APP_DIRECTORY }}/package-lock.json
            ${{ env.INFRASTRUCTURE_DIRECTORY }}
      - name: Upload application and infrastructure artifacts to Github Releases
        if: startsWith(github.ref_name, 'release') || startsWith(github.ref_name, 'hotfix')
        run: |
          set +e
          zip -r ./app.zip ${{ env.APP_DIRECTORY }}/.next ${{ env.APP_DIRECTORY }}/next.config.mjs ${{ env.APP_DIRECTORY }}/public ${{ env.APP_DIRECTORY }}/package.json ${{ env.APP_DIRECTORY }}/package-lock.json ${{ env.INFRASTRUCTURE_DIRECTORY }}
          PACKAGE_VERSION=$(cat ./${{ env.APP_DIRECTORY }}/package.json | jq -r '.version')
          LOG=$(git log ${{ github.ref_name }} --pretty=format:"%s by %aN in %h" --no-merges)
          release_status=$(gh release create v$PACKAGE_VERSION --title v$PACKAGE_VERSION --target ${{ github.ref_name }} --prerelease ---notes $LOG 2>&1)
          if [[ $release_status == *"422"* ]]; then
            echo "release $PACKAGE_VERSION already exists"
            exit 1;
          else
            echo "uploading to v$PACKAGE_VERSION release"
            gh release upload v$PACKAGE_VERSION ./app.zip --clobber
          fi
        env:
          GH_TOKEN: ${{ github.token }}