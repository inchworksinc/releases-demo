name: build-and-deploy-release
on:
  workflow_call:
    inputs:
      template_file_path:
        required: true
        description: Path to bicep template to deploy infrastructure.
        type: string
      slot_name:
        required: false
        description: Web app slot to deploy the Artifact
        type: string
        default: production

env:
  RESOURCE_GROUP_NAME: rg-appserviceslots-dev-eastus2-01
  APP_NAME: app-iw-appservice-slots
  APP_FOLDER: site
  APPLICATION_ARTIFACT_FOLDER: app-artifact
  REPOSITORY_URL: https://github.com/inchworksinc/releases-demo
jobs:
  deploy-staticcontent-changes:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Downloading artifacts from releases
        run: |
          LATEST_RELEASE_TAG=$(gh release list --exclude-drafts --exclude-pre-releases --json isLatest,tagName --jq '.[]| select(.isLatest)|.tagName')
          echo "latest release found is $LATEST_RELEASE_TAG"
          gh release download $LATEST_RELEASE_TAG -R ${{ env.REPOSITORY_URL }} -A zip
          mkdir ${{env.APPLICATION_ARTIFACT_FOLDER}}
          unzip release*.zip -d ${{ env.APPLICATION_ARTIFACT_FOLDER }}
        env: 
          GH_TOKEN: ${{ github.token }}
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Installing project dependencies
        run: npm install
        working-directory: ${{env.APPLICATION_ARTIFACT_FOLDER}}/${{env.APP_FOLDER}}
      - name: Building the application
        run: npm run build-app
        working-directory: ${{env.APPLICATION_ARTIFACT_FOLDER}}/${{env.APP_FOLDER}}
      - name: Creating a zip deployment file
        run: zip -r ../${{ env.APP_FOLDER }}.zip ./
        working-directory: ${{env.APPLICATION_ARTIFACT_FOLDER}}/${{env.APP_FOLDER}}
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ vars.CLIENT_ID }}
          tenant-id: ${{ vars.TENANT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION_ID }}  
      ### Deploying the web application
      - name: Deploying the web application
        run: az webapp deploy --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.APP_NAME }} --src-path ./${{env.APP_FOLDER}}.zip --slot ${{ inputs.slot_name }} --clean true --restart true --type zip --debug --async
      - name: Checking health endpoint of the app
        run: |
          timeout --foreground -s TERM 300s bash -c \
          'while [[ "$(curl -s -o /dev/null -m 3 -L -w ''%{http_code}'' $URL)" != "200" ]];\
            do echo "Waiting for $URL" && sleep 10;\
           done' $URL
          TIMEOUT_RETURN="$?"
          echo ${TIMEOUT_RETURN}
          if [[ "${TIMEOUT_RETURN}" == 0 ]]; then
            echo "$URL is UP!"
          else
            echo -e "\n[-] $URL - timeout or other error! [$TIMEOUT_RETURN]"
            exit
          fi
        env:
          URL: https://${{ env.APP_NAME }}-${{ inputs.slot_name }}.azurewebsites.net
      - name: Swap slots
        run: az webapp deployment slot swap -s staging -n ${{ env.APP_NAME }} -g ${{ env.RESOURCE_GROUP_NAME }} --target-slot production